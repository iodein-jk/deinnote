{"version":3,"sources":["webpack:///./src/components/works-tag.js","webpack:///./src/templates/works-tags.js","webpack:///./src/components/work.js"],"names":["TagsPage","tags","data","useStaticQuery","className","allMarkdownRemark","group","map","tag","key","to","kebabCase","fieldValue","totalCount","Tags","location","pageContext","posts","nodes","tagHeader","edges","title","class","pageQuery","Post","render","this","props","post","frontmatter","fields","slug","thumnail","date","childImageSharp","fluid","tagItems","itemScope","itemType","itemProp","React","Component"],"mappings":"4FAAA,sEAiEeA,IAvDS,SAAC,GAAa,EAAXC,KAAY,IACzBC,EAAOC,yBAAe,cAkB5B,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,uDACX,uBAAGA,UAAU,YAAb,UACA,wBAAIA,UAAU,iDACXF,EAAKG,kBAAkBC,MAAMC,KAAI,SAAAC,GAAG,OACnC,wBAAIC,IAAKD,EAAIA,KACX,kBAAC,OAAD,CAAME,GAAE,eAAiBC,IAAUH,EAAII,YAA/B,KACLJ,EAAII,WADP,KACqBJ,EAAIK,WADzB,c,kCCpC1B,8KAiDeC,UAlCF,SAAC,GAAmC,IAAlCZ,EAAiC,EAAjCA,KAAMa,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAErBC,EAAQf,EAAKG,kBAAkBa,MAC/BjB,EAAOC,EAAKG,kBAEXG,EAAOQ,EAAPR,IALqC,EAMhBN,EAAKG,kBAC3Bc,GAPsC,EAMrCC,MANqC,EAM9BP,WACC,GAAML,GAErB,OAAQ,kBAAC,IAAD,CAAQO,SAAUA,EAAUM,MAAOF,GACvC,yBAAKG,MAAM,aACP,kBAAC,IAAD,CAAKD,MAAOb,IACZ,wBAAIc,MAAM,gBAAe,8BAAOH,IAChC,kBAAC,IAAD,CAAKX,IAAKP,IACV,kBAAC,IAAD,CAAOgB,MAAOA,OAsBnB,IAAMM,EAAS,c,6HC5ChBC,E,kGACFC,OAAA,WACI,IAAMR,EAAQS,KAAKC,MAAMV,MACzB,OAAQ,6BACJ,wBAAIK,MAAM,uBAEFL,EAAMV,KAAI,SAAAqB,GACN,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAC9CA,EAAOH,EAAKC,YAAYE,KAExBC,GADOJ,EAAKC,YAAYI,KACbL,EAAKC,YAAYG,SAASE,gBAAgBC,OAErDC,EADOR,EAAKC,YAAY5B,KACRM,KAAI,SAACC,GAAD,OAAS,wBAAIc,MAAM,OACzC,kBAAC,OAAD,CAAMZ,GAAE,eAAiBC,IAAUH,GAA3B,KAAqCA,OAEjD,OAAQ,wBAAIc,MAAM,WAAWb,IAAKmB,EAAKE,OAAOC,MAC1C,6BAAS3B,UAAU,+BAA+BiC,UAAU,YAAYC,SAAS,6BAC7E,gCACI,gCACI,yBAAKlC,UAAU,gBACX,kBAAC,OAAD,CAAMM,GAAE,IAAMqB,EAAQQ,SAAS,OAC3B,kBAAC,IAAD,CAAOJ,MAAOH,OAI1B,wBAAIV,MAAM,gBACN,kBAAC,OAAD,CAAMZ,GAAE,IAAMqB,EAAQQ,SAAS,OAC3B,0BAAMA,SAAS,YAAYlB,MAIvC,wBAAIC,MAAM,4BACLc,W,GAhClBI,IAAMC,WA2CVjB","file":"component---src-templates-works-tags-js-234edab27fa90ab1b3c0.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Utilities\nimport kebabCase from \"lodash/kebabCase\"\n\n// Components\nimport { Helmet } from \"react-helmet\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nexport const TagsPage = ({ tags }) => {\n        const data = useStaticQuery(graphql`\n          query {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n            allMarkdownRemark(\n                limit: 2000\n                filter: { frontmatter: { category: { in: [\"works\"] } } }\n            ) {\n              group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n              }\n            }\n          }\n        `);\n        return (\n            <div className=\"tag-group\">\n                <div className=\"d-md-flex align-items-center justify-content-center\">\n                    <p className=\"col-md-1\">カテゴリー：</p>\n                    <ul className=\"col-md-11 d-flex flex-wrap align-items-center\">\n                      {data.allMarkdownRemark.group.map(tag => (\n                        <li key={tag.tag}>\n                          <Link to={`/works-tags/${kebabCase(tag.fieldValue)}/`}>\n                            {tag.fieldValue} ({tag.totalCount})\n                          </Link>\n                        </li>\n                      ))}\n                    </ul>\n                </div>\n            </div>\n        )\n}\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default TagsPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/works-tag\"\nimport WORKS from \"../components/work\"\nimport PAGER from \"../components/pager\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nconst Tags = ({data, location, pageContext}) => {\n    const siteTitle = pageContext || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const tags = data.allMarkdownRemark\n\n    const {tag} = pageContext\n    const {edges, totalCount} = data.allMarkdownRemark\n    const tagHeader = `${tag}`\n\n    return (<Layout location={location} title={tagHeader}>\n        <div class=\"container\">\n            <SEO title={tag} />\n            <h1 class=\"heading-main\"><span>{tagHeader}</span></h1>\n            <TAG tag={tags} />\n            <WORKS posts={posts} />\n        </div>\n    </Layout>)\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({tag: PropTypes.string.isRequired}),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(PropTypes.shape({\n                node: PropTypes.shape({\n                    frontmatter: PropTypes.shape({title: PropTypes.string.isRequired}),\n                    fields: PropTypes.shape({slug: PropTypes.string.isRequired})\n                })\n            }).isRequired)\n        })\n    })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql `\n  query worksTagListQuery($tag: String) {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    allMarkdownRemark(sort: {\n        fields: [frontmatter___date], order: DESC }\n        filter: { frontmatter: { tags: { in: [$tag] }, category: { in: [\"works\"] } } }\n        limit: 2000\n    ) {\n      totalCount\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nclass Post extends React.Component {\n    render() {\n        const posts = this.props.posts\n        return (<div>\n            <ol class=\"d-md-flex flex-wrap\">\n                {\n                    posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const slug = post.frontmatter.slug\n                        const date = post.frontmatter.date\n                        const thumnail = post.frontmatter.thumnail.childImageSharp.fluid\n                        const tags = post.frontmatter.tags\n                        const tagItems = tags.map((tag) => <li class=\"col\">\n                            <Link to={`/works-tags/${kebabCase(tag)}/`}>{tag}</Link>\n                        </li>)\n                        return (<li class=\"col-md-3\" key={post.fields.slug}>\n                            <article className=\"work-list-item p-md-10 pb-20\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n                                <header>\n                                    <figure>\n                                        <div className=\"posts__image\">\n                                            <Link to={`/${slug}`} itemProp=\"url\">\n                                                <Image fluid={thumnail}/>\n                                            </Link>\n                                        </div>\n                                    </figure>\n                                    <h2 class=\"post-hedding\">\n                                        <Link to={`/${slug}`} itemProp=\"url\">\n                                            <span itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                </header>\n                                <ul class=\"tagname d-flex flex-wrap\">\n                                    {tagItems}\n                                </ul>\n                            </article>\n                        </li>)\n                    })\n                }\n            </ol>\n        </div>)\n    }\n}\n\nexport default Post\n\nexport const pageQuery = graphql `\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}