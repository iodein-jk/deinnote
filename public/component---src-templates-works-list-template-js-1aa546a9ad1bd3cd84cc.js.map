{"version":3,"sources":["webpack:///./src/components/works-pager.js","webpack:///./src/templates/works-list-template.js"],"names":["Pager","render","pages","this","props","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","class","to","Array","from","length","_","i","key","React","Component","pageQuery","WorksIndex","data","location","pageContext","posts","allMarkdownRemark","nodes","tags","title","tag"],"mappings":"8OAwBeA,E,kGApBXC,OAAA,WACI,IAAMC,EAAQC,KAAKC,MAAMF,MACjBG,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAKA,EAAc,GAAGK,WAC/DC,EAAW,KAAKN,EAAc,GAAGK,WAEvC,OAAQ,yBAAKE,MAAM,sDACf,yBAAKA,MAAM,QAAQL,GAAa,kBAAC,OAAD,CAAMM,GAAE,SAAWJ,GAAnB,cAChC,yBAAKG,MAAM,+CACVE,MAAMC,KAAK,CAAEC,OAAQV,IAAY,SAACW,EAAGC,GAAJ,OAClC,kBAAC,OAAD,CAAMC,IAAG,qBAAsBD,EAAI,GAAKL,GAAE,UAAiB,IAANK,EAAU,GAAKA,EAAI,IAAMA,EAAI,OAGlF,yBAAKN,MAAM,QAAQJ,GAAY,kBAAC,OAAD,CAAMK,GAAE,SAAWF,GAAnB,gB,GAhBvBS,IAAMC,WC4BbC,G,oBAFEC,UAhBI,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAE3BC,GAFsD,EAAdrB,SAEhCkB,EAAKI,kBAAkBC,OAC/BC,EAAON,EAAKI,kBAElB,OAAQ,kBAAC,IAAD,CAAQH,SAAUA,EAAUM,MAJlB,QAKd,yBAAKnB,MAAM,aACP,kBAAC,IAAD,CAAKmB,MANK,SAOV,wBAAInB,MAAM,gBAAe,yCACzB,kBAAC,IAAD,CAAKoB,IAAKF,IACV,kBAAC,IAAD,CAAMH,MAAOA,IACb,kBAAC,EAAD,CAAOzB,MAAOwB,OAOJ","file":"component---src-templates-works-list-template-js-1aa546a9ad1bd3cd84cc.js","sourcesContent":["import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nclass Pager extends React.Component {\n    render() {\n        const pages = this.props.pages\n        const { currentPage, numPages } = pages\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\"+(currentPage - 1).toString()\n        const nextPage = \"/\"+(currentPage + 1).toString()\n\n        return (<div class=\"pagenation d-flex flex-wrap justify-content-center\">\n            <div class=\"col\">{!isFirst && ( <Link to={`/works${prevPage}`}> ← 前のページ </Link> )}</div>\n            <div class=\"col d-flex flex-wrap justify-content-center\">\n            {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/works${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            ))}\n            </div>\n            <div class=\"col\">{!isLast && ( <Link to={`/works${nextPage}`}> 次のページ → </Link> )}</div>\n        </div>)\n    }\n}\n\nexport default Pager\n\nexport const pageQuery = graphql `\n  query worksPagerQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      ) {\n\n          group(field: frontmatter___tags) {\n              tag: fieldValue\n              totalCount\n          }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/works-tag\"\nimport WORK from \"../components/work\"\nimport PAGER from \"../components/works-pager\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nconst WorksIndex = ({data, location, pageContext, numPages}) => {\n    const siteTitle = `制作実績` || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const tags = data.allMarkdownRemark\n\n    return (<Layout location={location} title={siteTitle}>\n        <div class=\"container\">\n            <SEO title={siteTitle} />\n            <h1 class=\"heading-main\"><span>過去の制作物</span></h1>\n            <TAG tag={tags} />\n            <WORK posts={posts} />\n            <PAGER pages={pageContext} />\n        </div>\n    </Layout>)\n}\n\nexport default WorksIndex\n\nexport const pageQuery = graphql `\n  query worksListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [\"works\"] } } }\n      limit: $limit\n      skip: $skip\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}