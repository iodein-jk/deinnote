{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/pager.js"],"names":["Tags","data","location","pageContext","posts","allMarkdownRemark","nodes","tags","tag","tagHeader","edges","totalCount","title","class","pageQuery","Pager","render","pages","this","props","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","to","Array","from","length","_","i","key","React","Component"],"mappings":"4FAAA,8KAiDeA,UAlCF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAErBC,EAAQH,EAAKI,kBAAkBC,MAC/BC,EAAON,EAAKI,kBAEXG,EAAOL,EAAPK,IALqC,EAMhBP,EAAKI,kBAC3BI,GAPsC,EAMrCC,MANqC,EAM9BC,WACC,GAAMH,GAErB,OAAQ,kBAAC,IAAD,CAAQN,SAAUA,EAAUU,MAAOH,GACvC,yBAAKI,MAAM,aACP,kBAAC,IAAD,CAAKD,MAAOJ,IACZ,wBAAIK,MAAM,gBAAe,8BAAOJ,IAChC,kBAAC,IAAD,CAAKD,IAAKD,IACV,kBAAC,IAAD,CAAMH,MAAOA,OAsBlB,IAAMU,EAAS,c,qFChDhBC,E,kGACFC,OAAA,WACI,IAAMC,EAAQC,KAAKC,MAAMF,MACjBG,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAKA,EAAc,GAAGK,WAC/DC,EAAW,KAAKN,EAAc,GAAGK,WAEvC,OAAQ,yBAAKZ,MAAM,sDACf,yBAAKA,MAAM,QAAQS,GAAa,kBAAC,OAAD,CAAMK,GAAIH,GAAV,cAChC,yBAAKX,MAAM,+CACVe,MAAMC,KAAK,CAAEC,OAAQT,IAAY,SAACU,EAAGC,GAAJ,OAClC,kBAAC,OAAD,CAAMC,IAAG,qBAAsBD,EAAI,GAAKL,GAAE,KAAY,IAANK,EAAU,GAAKA,EAAI,IAAMA,EAAI,OAG7E,yBAAKnB,MAAM,QAAQU,GAAY,kBAAC,OAAD,CAAMI,GAAID,GAAV,gB,GAhBvBQ,IAAMC,WAqBXpB","file":"component---src-templates-tags-js-107aac7754681e350903.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/tag\"\nimport POST from \"../components/post\"\nimport PAGER from \"../components/pager\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nconst Tags = ({data, location, pageContext}) => {\n    const siteTitle = pageContext || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const tags = data.allMarkdownRemark\n\n    const {tag} = pageContext\n    const {edges, totalCount} = data.allMarkdownRemark\n    const tagHeader = `${tag}`\n\n    return (<Layout location={location} title={tagHeader}>\n        <div class=\"container\">\n            <SEO title={tag} />\n            <h1 class=\"heading-main\"><span>{tagHeader}</span></h1>\n            <TAG tag={tags} />\n            <POST posts={posts} />\n        </div>\n    </Layout>)\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({tag: PropTypes.string.isRequired}),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(PropTypes.shape({\n                node: PropTypes.shape({\n                    frontmatter: PropTypes.shape({title: PropTypes.string.isRequired}),\n                    fields: PropTypes.shape({slug: PropTypes.string.isRequired})\n                })\n            }).isRequired)\n        })\n    })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql `\n  query tagListQuery($tag: String) {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    allMarkdownRemark(sort: {\n        fields: [frontmatter___date], order: DESC }\n        filter: { frontmatter: { tags: { in: [$tag] }, category: { in: [\"blog\"] } } }\n        limit: 2000\n    ) {\n      totalCount\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nclass Pager extends React.Component {\n    render() {\n        const pages = this.props.pages\n        const { currentPage, numPages } = pages\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\"+(currentPage - 1).toString()\n        const nextPage = \"/\"+(currentPage + 1).toString()\n\n        return (<div class=\"pagenation d-flex flex-wrap justify-content-center\">\n            <div class=\"col\">{!isFirst && ( <Link to={prevPage}> ← 前のページ </Link> )}</div>\n            <div class=\"col d-flex flex-wrap justify-content-center\">\n            {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            ))}\n            </div>\n            <div class=\"col\">{!isLast && ( <Link to={nextPage}> 次のページ → </Link> )}</div>\n        </div>)\n    }\n}\n\nexport default Pager\n\nexport const pageQuery = graphql `\n  query pagerQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      ) {\n\n          group(field: frontmatter___tags) {\n              tag: fieldValue\n              totalCount\n          }\n    }\n  }\n`\n"],"sourceRoot":""}