{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","data","location","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","tagItems","frontmatter","tags","map","tag","class","to","kebabCase","siteUrl","slug","fields","console","log","description","excerpt","className","itemScope","itemType","itemProp","date","url","fluid","thumnail","childImageSharp","dangerouslySetInnerHTML","__html","tableOfContents","html","rel","pageQuery"],"mappings":"4FAAA,oKAmEeA,UAzDU,SAAC,GAAmC,IAAD,EAAjCC,EAAiC,EAAjCA,KAAmBC,GAAc,EAA3BC,YAA2B,EAAdD,UACpCE,EAAOH,EAAKI,eACZC,GAAY,UAAAL,EAAKM,KAAKC,oBAAV,eACZC,QADY,QAEXC,EAAkBT,EAAlBS,SAAUC,EAAQV,EAARU,KAEXC,EADOR,EAAKS,YAAYC,KACRC,KAAI,SAACC,GAAD,OAAS,wBAAIC,MAAM,OACzC,kBAAC,OAAD,CAAMC,GAAE,SAAWC,IAAUH,GAArB,KAA+BA,OAErCI,EAAUnB,EAAKM,KAAKC,aAAaY,QACjCC,EAAUjB,EAAKkB,OAAOD,KAG5B,OADJE,QAAQC,IAAIb,GACA,kBAAC,IAAD,CAAQT,SAAUA,EAAUO,MAAOH,GACvC,kBAAC,IAAD,CAAKG,MAAOL,EAAKS,YAAYJ,MAAOgB,YAAarB,EAAKS,YAAYY,aAAerB,EAAKsB,UACtF,6BAASC,UAAU,wBAAwBC,UAAU,YAAYC,SAAS,6BACtE,4BAAQF,UAAU,eACd,wBAAIG,SAAS,YAAY1B,EAAKS,YAAYJ,OAC1C,uBAAGkB,UAAU,YAAYvB,EAAKS,YAAYkB,MAC1C,wBAAId,MAAM,mDACLL,GAEL,kBAAC,IAAD,CAAOH,MAAOL,EAAKS,YAAYJ,MAAOuB,IAAG,GAAKZ,EAAUC,EAAQI,YAAarB,EAAKsB,UAClF,gCACI,yBAAKC,UAAU,gBACX,kBAAC,IAAD,CAAOA,UAAU,GAAGM,MAAO7B,EAAKS,YAAYqB,SAASC,gBAAgBF,WAIjF,yBAAKN,UAAU,cAAcS,wBAAyB,CAACC,OAAQjC,EAAKkC,mBACpE,6BAASX,UAAU,cAAcS,wBAAyB,CAClDC,OAAQjC,EAAKmC,MACdT,SAAS,iBAEpB,yBAAKH,UAAU,mCACX,wBAAIA,UAAU,aACV,wBAAIA,UAAU,iBAENjB,GAAa,kBAAC,OAAD,CAAMQ,GAAE,GAAKR,EAASY,OAAOD,KAAQmB,IAAI,QAClD,kBAAC,IAAD,CAAOP,MAAOvB,EAASG,YAAYqB,SAASC,gBAAgBF,QAC5D,8BAAOvB,EAASG,YAAYJ,SAIxC,wBAAIkB,UAAU,iBAENhB,GAAS,kBAAC,OAAD,CAAMO,GAAE,GAAKP,EAAKW,OAAOD,KAAQmB,IAAI,QAC1C,kBAAC,IAAD,CAAOP,MAAOtB,EAAKE,YAAYqB,SAASC,gBAAgBF,QACxD,8BAAOtB,EAAKE,YAAYJ,aAW7C,IAAMgC,EAAS","file":"component---src-templates-blog-post-js-e890e8fb1ce966f26567.js","sourcesContent":["import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Share from \"../components/share\";\n\nimport Image from \"gatsby-image\";\nimport kebabCase from \"lodash/kebabCase\"\n\nconst BlogPostTemplate = ({data, pageContext, location}) => {\n    const post = data.markdownRemark\n    const siteTitle = data.site.siteMetadata\n        ?.title || `Title`\n    const {previous, next} = data\n    const tags = post.frontmatter.tags\n    const tagItems = tags.map((tag) => <li class=\"col\">\n        <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n    </li>)\n    const siteUrl = data.site.siteMetadata.siteUrl;\n    const slug    = post.fields.slug;\n\nconsole.log(next)\n    return (<Layout location={location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt}/>\n        <article className=\"blog-post container-2\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n            <header className=\"text-center\">\n                <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n                <p className=\"datetime\">{post.frontmatter.date}</p>\n                <ul class=\"tagname d-flex flex-wrap justify-content-center\">\n                    {tagItems}\n                </ul>\n                <Share title={post.frontmatter.title} url={`${siteUrl}${slug}`} description={post.excerpt} />\n                <figure>\n                    <div className=\"posts__image\">\n                        <Image className=\"\" fluid={post.frontmatter.thumnail.childImageSharp.fluid}/>\n                    </div>\n                </figure>\n            </header>\n            <div className=\"posts-index\" dangerouslySetInnerHTML={{__html: post.tableOfContents}}/>\n            <section className=\"articleBody\" dangerouslySetInnerHTML={{\n                    __html: post.html\n                }} itemProp=\"articleBody\"/>\n        </article>\n        <nav className=\"blog-post-nav container-2 mt-80\">\n            <ul className=\"d-md-flex\">\n                <li className=\"col-md-6 p-20\">\n                    {\n                        previous && (<Link to={`${previous.fields.slug}`} rel=\"prev\">\n                            <Image fluid={previous.frontmatter.thumnail.childImageSharp.fluid}/>\n                            <span>{previous.frontmatter.title}</span>\n                        </Link>)\n                    }\n                </li>\n                <li className=\"col-md-6 p-20\">\n                    {\n                        next && (<Link to={`${next.fields.slug}`} rel=\"next\">\n                            <Image fluid={next.frontmatter.thumnail.childImageSharp.fluid}/>\n                            <span>{next.frontmatter.title}</span>\n                        </Link>)\n                    }\n                </li>\n            </ul>\n        </nav>\n    </Layout>)\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql `\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"YYYY年MM月DD日\")\n        description\n        tags\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 1280) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      tableOfContents\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 320) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 320) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}