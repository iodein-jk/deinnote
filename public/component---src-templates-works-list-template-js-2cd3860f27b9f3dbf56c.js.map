{"version":3,"sources":["webpack:///./src/components/works-pager.js","webpack:///./src/templates/works-list-template.js","webpack:///./src/components/work.js"],"names":["Pager","render","pages","this","props","currentPage","worksNumPages","isFirst","isLast","prevPage","toString","nextPage","class","to","Array","from","length","_","i","key","React","Component","pageQuery","WorksIndex","data","location","pageContext","posts","numPages","allMarkdownRemark","nodes","title","Post","map","post","frontmatter","fields","slug","thumnail","date","childImageSharp","fluid","tagItems","tags","tag","kebabCase","className","itemScope","itemType","itemProp","imgStyle","objectFit","objectPosition"],"mappings":"8OAwBeA,E,kGApBXC,OAAA,WACI,IAAMC,EAAQC,KAAKC,MAAMF,MACjBG,EAA+BH,EAA/BG,YAAaC,EAAkBJ,EAAlBI,cACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,SAAW,WAAWA,EAAc,GAAGK,WAC1EC,EAAW,KAAKN,EAAc,GAAGK,WAEvC,OAAQ,yBAAKE,MAAM,sDACf,yBAAKA,MAAM,QAAQL,GAAa,kBAAC,OAAD,CAAMM,GAAE,GAAKJ,GAAb,cAChC,yBAAKG,MAAM,+CACVE,MAAMC,KAAK,CAAEC,OAAQV,IAAiB,SAACW,EAAGC,GAAJ,OACvC,kBAAC,OAAD,CAAMC,IAAG,qBAAsBD,EAAI,GAAKL,GAAE,WAAkB,IAANK,EAAU,GAAKA,EAAI,IAAMA,EAAI,OAGnF,yBAAKN,MAAM,QAAQJ,GAAY,kBAAC,OAAD,CAAMK,GAAE,SAAWF,GAAnB,gB,GAhBvBS,IAAMC,WCuBbC,GAFEC,UAfI,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAE3BC,GAFsD,EAAdC,SAEhCJ,EAAKK,kBAAkBC,OAErC,OAAQ,kBAAC,IAAD,CAAQL,SAAUA,EAAUM,MAHrB,QAIX,yBAAKnB,MAAM,aACP,kBAAC,IAAD,CAAKmB,MALE,SAMP,wBAAInB,MAAM,gBAAe,8BANlB,SAOP,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMe,MAAOA,IACb,kBAAC,EAAD,CAAOzB,MAAOwB,OAOJ,e,6HCnBhBM,E,kGACF/B,OAAA,WACI,IAAM0B,EAAQxB,KAAKC,MAAMuB,MACzB,OAAQ,6BACJ,wBAAIf,MAAM,uBAEFe,EAAMM,KAAI,SAAAC,GACN,IAAMH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KAC9CA,EAAOH,EAAKC,YAAYE,KAExBC,GADOJ,EAAKC,YAAYI,KACbL,EAAKC,YAAYG,SAASE,gBAAgBC,OAErDC,EADOR,EAAKC,YAAYQ,KACRV,KAAI,SAACW,GAAD,OAAS,wBAAIhC,MAAM,OACzC,kBAAC,OAAD,CAAMC,GAAE,eAAiBgC,IAAUD,GAA3B,KAAqCA,OAEjD,OAAQ,wBAAIhC,MAAM,WAAWO,IAAKe,EAAKE,OAAOC,MAC1C,6BAASS,UAAU,+BAA+BC,UAAU,YAAYC,SAAS,6BAC7E,gCACI,gCACI,yBAAKF,UAAU,gBACX,kBAAC,OAAD,CAAMjC,GAAE,IAAMwB,EAAQY,SAAS,OAC3B,kBAAC,IAAD,CAAOR,MAAOH,EAAUY,SAAU,CAACC,UAAW,QAAQC,eAAe,gBAIjF,wBAAIxC,MAAM,gBACN,kBAAC,OAAD,CAAMC,GAAE,IAAMwB,EAAQY,SAAS,OAC3B,0BAAMA,SAAS,YAAYlB,MAIvC,wBAAInB,MAAM,4BACL8B,W,GAhClBtB,IAAMC,WA2CVW","file":"component---src-templates-works-list-template-js-2cd3860f27b9f3dbf56c.js","sourcesContent":["import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nclass Pager extends React.Component {\n    render() {\n        const pages = this.props.pages\n        const { currentPage, worksNumPages } = pages\n        const isFirst = currentPage === 1\n        const isLast = currentPage === worksNumPages\n        const prevPage = currentPage - 1 === 1 ? \"/works\" : \"/works/\"+(currentPage - 1).toString()\n        const nextPage = \"/\"+(currentPage + 1).toString()\n\n        return (<div class=\"pagenation d-flex flex-wrap justify-content-center\">\n            <div class=\"col\">{!isFirst && ( <Link to={`${prevPage}`}> ← 前のページ </Link> )}</div>\n            <div class=\"col d-flex flex-wrap justify-content-center\">\n            {Array.from({ length: worksNumPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/works/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            ))}\n            </div>\n            <div class=\"col\">{!isLast && ( <Link to={`/works${nextPage}`}> 次のページ → </Link> )}</div>\n        </div>)\n    }\n}\n\nexport default Pager\n\nexport const pageQuery = graphql `\n  query worksPagerQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      ) {\n\n          group(field: frontmatter___tags) {\n              tag: fieldValue\n              totalCount\n          }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/works-tag\"\nimport WORK from \"../components/work\"\nimport PAGER from \"../components/works-pager\"\n\nconst WorksIndex = ({data, location, pageContext, numPages}) => {\n    const siteTitle = `制作実績`\n    const posts = data.allMarkdownRemark.nodes\n\n    return (<Layout location={location} title={siteTitle}>\n        <div class=\"container\">\n            <SEO title={siteTitle} />\n            <h1 class=\"heading-main\"><span>{siteTitle}</span></h1>\n            <TAG />\n            <WORK posts={posts} />\n            <PAGER pages={pageContext} />\n        </div>\n    </Layout>)\n}\n\nexport default WorksIndex\n\nexport const pageQuery = graphql `\n  query worksListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [\"works\"] } } }\n      limit: $limit\n      skip: $skip\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nclass Post extends React.Component {\n    render() {\n        const posts = this.props.posts\n        return (<div>\n            <ol class=\"d-md-flex flex-wrap\">\n                {\n                    posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const slug = post.frontmatter.slug\n                        const date = post.frontmatter.date\n                        const thumnail = post.frontmatter.thumnail.childImageSharp.fluid\n                        const tags = post.frontmatter.tags\n                        const tagItems = tags.map((tag) => <li class=\"col\">\n                            <Link to={`/works-tags/${kebabCase(tag)}/`}>{tag}</Link>\n                        </li>)\n                        return (<li class=\"col-md-3\" key={post.fields.slug}>\n                            <article className=\"work-list-item p-md-10 pb-20\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n                                <header>\n                                    <figure>\n                                        <div className=\"posts__image\">\n                                            <Link to={`/${slug}`} itemProp=\"url\">\n                                                <Image fluid={thumnail} imgStyle={{objectFit: \"cover\",objectPosition:\"50% 50%\"}}/>\n                                            </Link>\n                                        </div>\n                                    </figure>\n                                    <h2 class=\"post-hedding\">\n                                        <Link to={`/${slug}`} itemProp=\"url\">\n                                            <span itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                </header>\n                                <ul class=\"tagname d-flex flex-wrap\">\n                                    {tagItems}\n                                </ul>\n                            </article>\n                        </li>)\n                    })\n                }\n            </ol>\n        </div>)\n    }\n}\n\nexport default Post\n\nexport const pageQuery = graphql `\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}