{"version":3,"sources":["webpack:///./src/components/pager.js","webpack:///./src/components/post.js","webpack:///./src/templates/blog-list-template.js"],"names":["Pager","render","pages","this","props","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","class","to","Array","from","length","_","i","key","React","Component","Post","posts","map","post","title","frontmatter","fields","slug","date","thumnailHtml","thumnail","fluid","childImageSharp","imgStyle","objectFit","objectPosition","className","src","thumnailImage","alt","tagItems","tags","tag","kebabCase","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","description","excerpt","BlogIndex","data","location","pageContext","siteUrl","allMarkdownRemark","nodes","pageQuery"],"mappings":"8IAGMA,E,kGACFC,OAAA,WACI,IAAMC,EAAQC,KAAKC,MAAMF,MACjBG,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAKA,EAAc,GAAGK,WAC/DC,EAAW,KAAKN,EAAc,GAAGK,WAEvC,OAAQ,yBAAKE,MAAM,sDACf,yBAAKA,MAAM,QAAQL,GAAa,kBAAC,OAAD,CAAMM,GAAIJ,GAAV,cAChC,yBAAKG,MAAM,+CACVE,MAAMC,KAAK,CAAEC,OAAQV,IAAY,SAACW,EAAGC,GAAJ,OAClC,kBAAC,OAAD,CAAMC,IAAG,qBAAsBD,EAAI,GAAKL,GAAE,KAAY,IAANK,EAAU,GAAKA,EAAI,IAAMA,EAAI,OAG7E,yBAAKN,MAAM,QAAQJ,GAAY,kBAAC,OAAD,CAAMK,GAAIF,GAAV,gB,GAhBvBS,IAAMC,WAqBXrB,O,kJClBTsB,E,kGACFrB,OAAA,WACI,IAAMsB,EAAQpB,KAAKC,MAAMmB,MAEzB,OAAQ,6BACJ,wBAAIX,MAAM,uBAEFW,EAAMC,KAAI,SAAAC,GACN,IAAMC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAC9CA,EAAOJ,EAAKE,YAAYE,KACxBC,EAAOL,EAAKE,YAAYG,KAExBC,EAAeN,EAAKE,YAAYK,SAChC,kBAAC,IAAD,CAAOC,MAAOR,EAAKE,YAAYK,SAASE,gBAAgBD,MAAOE,SAAU,CAACC,UAAW,QAAQC,eAAe,aAC5G,yBAAKC,UAAU,wBAAuB,yBAAKC,IAAKC,IAAeC,IAAI,GAAGH,UAAU,sBAGhFI,EADOjB,EAAKE,YAAYgB,KACRnB,KAAI,SAACoB,GAAD,OAAS,wBAAIhC,MAAM,OAAM,kBAAC,OAAD,CAAMC,GAAE,SAAWgC,IAAUD,GAArB,KAA+BA,OAE1F,OAAQ,wBAAIhC,MAAM,WAAWO,IAAKM,EAAKG,OAAOC,MAC1C,6BAASS,UAAU,+BAA+BQ,UAAU,YAAYC,SAAS,6BAC7E,gCACI,gCACI,yBAAKT,UAAU,gBACX,kBAAC,OAAD,CAAMzB,GAAE,IAAMgB,EAAQmB,SAAS,OAC1BjB,KAIb,wBAAInB,MAAM,gBACN,kBAAC,OAAD,CAAMC,GAAE,IAAMgB,EAAQmB,SAAS,OAC3B,0BAAMA,SAAS,YAAYtB,MAIvC,wBAAId,MAAM,4BACL8B,GAEL,iCACI,uBAAGO,wBAAyB,CACpBC,OAAQzB,EAAKE,YAAYwB,aAAe1B,EAAK2B,SAC9CJ,SAAS,cAAcpC,MAAM,gBACpC,+BAAQkB,Y,GA1CzBV,IAAMC,WAqDVC,O,oCC3Df,kJAwBe+B,UAfG,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,YAE1BjC,GAF8D,EAAvBjB,SAAuB,EAAbmD,QAEzCH,EAAKI,kBAAkBC,OAErC,OAAQ,kBAAC,IAAD,CAAQJ,SAAUA,EAAU7B,MAHrB,OAIX,yBAAKd,MAAM,aACP,kBAAC,IAAD,CAAKc,MALE,QAMP,wBAAId,MAAM,gBAAe,8BANlB,QAOP,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMW,MAAOA,IACb,kBAAC,IAAD,CAAOrB,MAAOsD,OAOnB,IAAMI,EAAS","file":"component---src-templates-blog-list-template-js-ffca2cd2b1b98730312b.js","sourcesContent":["import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nclass Pager extends React.Component {\n    render() {\n        const pages = this.props.pages\n        const { currentPage, numPages } = pages\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\"+(currentPage - 1).toString()\n        const nextPage = \"/\"+(currentPage + 1).toString()\n\n        return (<div class=\"pagenation d-flex flex-wrap justify-content-center\">\n            <div class=\"col\">{!isFirst && ( <Link to={prevPage}> ← 前のページ </Link> )}</div>\n            <div class=\"col d-flex flex-wrap justify-content-center\">\n            {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            ))}\n            </div>\n            <div class=\"col\">{!isLast && ( <Link to={nextPage}> 次のページ → </Link> )}</div>\n        </div>)\n    }\n}\n\nexport default Pager\n","import React from \"react\"\nimport {useStaticQuery, Link, graphql} from \"gatsby\"\nimport Image from \"gatsby-image\";\nimport kebabCase from \"lodash/kebabCase\"\nimport thumnailImage from \"../images/thumnail.jpg\";\n\nclass Post extends React.Component {\n    render() {\n        const posts = this.props.posts\n\n        return (<div>\n            <ol class=\"d-md-flex flex-wrap\">\n                {\n                    posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const slug = post.frontmatter.slug\n                        const date = post.frontmatter.date\n\n                        const thumnailHtml = post.frontmatter.thumnail\n                            ? <Image fluid={post.frontmatter.thumnail.childImageSharp.fluid} imgStyle={{objectFit: \"cover\",objectPosition:\"50% 50%\"}}/>\n                            : <div className=\"gatsby-image-wrapper\"><img src={thumnailImage} alt=\"\" className=\"default-thumnail\" /></div>\n\n                        const tags = post.frontmatter.tags\n                        const tagItems = tags.map((tag) => <li class=\"col\"><Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link></li>)\n\n                        return (<li class=\"col-md-4\" key={post.fields.slug}>\n                            <article className=\"post-list-item p-md-10 pb-20\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n                                <header>\n                                    <figure>\n                                        <div className=\"posts__image\">\n                                            <Link to={`/${slug}`} itemProp=\"url\">\n                                                {thumnailHtml}\n                                            </Link>\n                                        </div>\n                                    </figure>\n                                    <h2 class=\"post-hedding\">\n                                        <Link to={`/${slug}`} itemProp=\"url\">\n                                            <span itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                </header>\n                                <ul class=\"tagname d-flex flex-wrap\">\n                                    {tagItems}\n                                </ul>\n                                <section>\n                                    <p dangerouslySetInnerHTML={{\n                                            __html: post.frontmatter.description || post.excerpt\n                                        }} itemProp=\"description\" class=\"description\"/>\n                                    <small>{date}</small>\n                                </section>\n                            </article>\n                        </li>)\n                    })\n                }\n            </ol>\n        </div>)\n    }\n}\n\nexport default Post\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/tag\"\nimport POST from \"../components/post\"\nimport PAGER from \"../components/pager\"\n\nconst BlogIndex = ({data, location, pageContext, numPages ,siteUrl}) => {\n    const siteTitle = `ブログ`\n    const posts = data.allMarkdownRemark.nodes\n\n    return (<Layout location={location} title={siteTitle}>\n        <div class=\"container\">\n            <SEO title={siteTitle} />\n            <h1 class=\"heading-main\"><span>{siteTitle}</span></h1>\n            <TAG />\n            <POST posts={posts} />\n            <PAGER pages={pageContext} />\n        </div>\n    </Layout>)\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql `\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [\"blog\"] } } }\n      limit: $limit\n      skip: $skip\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}