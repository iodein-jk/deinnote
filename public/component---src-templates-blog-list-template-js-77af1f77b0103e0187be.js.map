{"version":3,"sources":["webpack:///./src/components/tag.js","webpack:///./src/components/post.js","webpack:///./src/templates/blog-list-template.js"],"names":["TagsPage","tags","data","useStaticQuery","className","to","allMarkdownRemark","group","map","tag","key","kebabCase","fieldValue","totalCount","Post","render","posts","this","props","class","post","title","frontmatter","fields","slug","date","thumnail","childImageSharp","fluid","tagItems","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","BlogIndex","location","pageContext","numPages","nodes","pages","pageQuery"],"mappings":"2FAAA,sEAkEeA,IAxDS,SAAC,GAAa,EAAXC,KAAY,IACzBC,EAAOC,yBAAe,cAkB5B,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,uDACX,uBAAGA,UAAU,YAAb,UACA,wBAAIA,UAAU,iDACV,4BAAI,kBAAC,OAAD,CAAMC,GAAE,KAAR,QACLH,EAAKI,kBAAkBC,MAAMC,KAAI,SAAAC,GAAG,OACnC,wBAAIC,IAAKD,EAAIA,KACX,kBAAC,OAAD,CAAMJ,GAAE,SAAWM,IAAUF,EAAIG,YAAzB,KACLH,EAAIG,WADP,KACqBH,EAAII,WADzB,c,6HC9BpBC,E,kGACFC,OAAA,WACI,IAAMC,EAAQC,KAAKC,MAAMF,MACzB,OAAQ,6BACJ,wBAAIG,MAAM,uBAEFH,EAAMR,KAAI,SAAAY,GACN,IAAMC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAC9CA,EAAOJ,EAAKE,YAAYE,KACxBC,EAAOL,EAAKE,YAAYG,KACxBC,EAAWN,EAAKE,YAAYI,SAASC,gBAAgBC,MAErDC,EADOT,EAAKE,YAAYrB,KACRO,KAAI,SAACC,GAAD,OAAS,wBAAIU,MAAM,OACzC,kBAAC,OAAD,CAAMd,GAAE,SAAWM,IAAUF,GAArB,KAA+BA,OAE3C,OAAQ,wBAAIU,MAAM,WAAWT,IAAKU,EAAKG,OAAOC,MAC1C,6BAASpB,UAAU,+BAA+B0B,UAAU,YAAYC,SAAS,6BAC7E,gCACI,gCACI,yBAAK3B,UAAU,gBACX,kBAAC,OAAD,CAAMC,GAAE,IAAMmB,EAAQQ,SAAS,OAC3B,kBAAC,IAAD,CAAOJ,MAAOF,OAI1B,wBAAIP,MAAM,gBACN,kBAAC,OAAD,CAAMd,GAAE,IAAMmB,EAAQQ,SAAS,OAC3B,0BAAMA,SAAS,YAAYX,MAIvC,wBAAIF,MAAM,4BACLU,GAEL,iCACI,uBAAGI,wBAAyB,CACpBC,OAAQd,EAAKE,YAAYa,aAAef,EAAKgB,SAC9CJ,SAAS,cAAcb,MAAM,gBACpC,+BAAQM,Y,GAtCzBY,IAAMC,WAiDVxB,O,oCCxDf,sKA4BeyB,UAfG,SAAC,GAA6C,IAA5CrC,EAA2C,EAA3CA,KAAMsC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAE1BzB,GAFqD,EAAd0B,SAE/BxC,EAAKI,kBAAkBqC,OAErC,OAAQ,kBAAC,IAAD,CAAQH,SAAUA,EAAUnB,MAHrB,OAIX,yBAAKF,MAAM,aACP,kBAAC,IAAD,CAAKE,MALE,QAMP,wBAAIF,MAAM,gBAAe,8BANlB,QAOP,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMH,MAAOA,IACb,kBAAC,IAAD,CAAO4B,MAAOH,OAOnB,IAAMI,EAAS","file":"component---src-templates-blog-list-template-js-77af1f77b0103e0187be.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Utilities\nimport kebabCase from \"lodash/kebabCase\"\n\n// Components\nimport { Helmet } from \"react-helmet\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nexport const TagsPage = ({ tags }) => {\n        const data = useStaticQuery(graphql`\n          query {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n            allMarkdownRemark(\n                limit: 2000\n                filter: { frontmatter: { category: { in: [\"blog\"] } } }\n            ) {\n              group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n              }\n            }\n          }\n        `);\n        return (\n            <div className=\"tag-group\">\n                <div className=\"d-md-flex align-items-center justify-content-center\">\n                    <p className=\"col-md-1\">カテゴリー：</p>\n                    <ul className=\"col-md-11 d-flex flex-wrap align-items-center\">\n                        <li><Link to={`/`}>すべて</Link></li>\n                      {data.allMarkdownRemark.group.map(tag => (\n                        <li key={tag.tag}>\n                          <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                            {tag.fieldValue} ({tag.totalCount})\n                          </Link>\n                        </li>\n                      ))}\n                    </ul>\n                </div>\n            </div>\n        )\n}\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default TagsPage\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nclass Post extends React.Component {\n    render() {\n        const posts = this.props.posts\n        return (<div>\n            <ol class=\"d-md-flex flex-wrap\">\n                {\n                    posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const slug = post.frontmatter.slug\n                        const date = post.frontmatter.date\n                        const thumnail = post.frontmatter.thumnail.childImageSharp.fluid\n                        const tags = post.frontmatter.tags\n                        const tagItems = tags.map((tag) => <li class=\"col\">\n                            <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                        </li>)\n                        return (<li class=\"col-md-4\" key={post.fields.slug}>\n                            <article className=\"post-list-item p-md-10 pb-20\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n                                <header>\n                                    <figure>\n                                        <div className=\"posts__image\">\n                                            <Link to={`/${slug}`} itemProp=\"url\">\n                                                <Image fluid={thumnail}/>\n                                            </Link>\n                                        </div>\n                                    </figure>\n                                    <h2 class=\"post-hedding\">\n                                        <Link to={`/${slug}`} itemProp=\"url\">\n                                            <span itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                </header>\n                                <ul class=\"tagname d-flex flex-wrap\">\n                                    {tagItems}\n                                </ul>\n                                <section>\n                                    <p dangerouslySetInnerHTML={{\n                                            __html: post.frontmatter.description || post.excerpt\n                                        }} itemProp=\"description\" class=\"description\"/>\n                                    <small>{date}</small>\n                                </section>\n                            </article>\n                        </li>)\n                    })\n                }\n            </ol>\n        </div>)\n    }\n}\n\nexport default Post\n\nexport const pageQuery = graphql `\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/tag\"\nimport POST from \"../components/post\"\nimport PAGER from \"../components/pager\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nconst BlogIndex = ({data, location, pageContext, numPages}) => {\n    const siteTitle = `ブログ`\n    const posts = data.allMarkdownRemark.nodes\n\n    return (<Layout location={location} title={siteTitle}>\n        <div class=\"container\">\n            <SEO title={siteTitle} />\n            <h1 class=\"heading-main\"><span>{siteTitle}</span></h1>\n            <TAG />\n            <POST posts={posts} />\n            <PAGER pages={pageContext} />\n        </div>\n    </Layout>)\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql `\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [\"blog\"] } } }\n      limit: $limit\n      skip: $skip\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}