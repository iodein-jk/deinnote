{"version":3,"sources":["webpack:///./src/templates/works-tags.js","webpack:///./src/components/work.js","webpack:///./src/components/pager.js"],"names":["Tags","data","location","pageContext","posts","allMarkdownRemark","nodes","tags","tag","tagHeader","edges","totalCount","title","class","pageQuery","Post","render","this","props","map","post","frontmatter","fields","slug","thumnail","date","childImageSharp","fluid","tagItems","to","kebabCase","key","className","itemScope","itemType","itemProp","imgStyle","objectFit","objectPosition","React","Component","Pager","pages","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","Array","from","length","_","i"],"mappings":"4FAAA,gJA4CeA,UAlCF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAErBC,EAAQH,EAAKI,kBAAkBC,MAC/BC,EAAON,EAAKI,kBAEXG,EAAOL,EAAPK,IALqC,EAMhBP,EAAKI,kBAC3BI,GAPsC,EAMrCC,MANqC,EAM9BC,WACC,GAAMH,GAErB,OAAQ,kBAAC,IAAD,CAAQN,SAAUA,EAAUU,MAAOH,GACvC,yBAAKI,MAAM,aACP,kBAAC,IAAD,CAAKD,MAAOJ,IACZ,wBAAIK,MAAM,gBAAe,8BAAOJ,IAChC,kBAAC,IAAD,CAAKD,IAAKD,IACV,kBAAC,IAAD,CAAOH,MAAOA,OAsBnB,IAAMU,EAAS,c,6HCvChBC,E,kGACFC,OAAA,WACI,IAAMZ,EAAQa,KAAKC,MAAMd,MACzB,OAAQ,6BACJ,wBAAIS,MAAM,uBAEFT,EAAMe,KAAI,SAAAC,GACN,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAC9CA,EAAOH,EAAKC,YAAYE,KAExBC,GADOJ,EAAKC,YAAYI,KACbL,EAAKC,YAAYG,SAASE,gBAAgBC,OAErDC,EADOR,EAAKC,YAAYd,KACRY,KAAI,SAACX,GAAD,OAAS,wBAAIK,MAAM,OACzC,kBAAC,OAAD,CAAMgB,GAAE,eAAiBC,IAAUtB,GAA3B,KAAqCA,OAEjD,OAAQ,wBAAIK,MAAM,WAAWkB,IAAKX,EAAKE,OAAOC,MAC1C,6BAASS,UAAU,+BAA+BC,UAAU,YAAYC,SAAS,6BAC7E,gCACI,gCACI,yBAAKF,UAAU,gBACX,kBAAC,OAAD,CAAMH,GAAE,IAAMN,EAAQY,SAAS,OAC3B,kBAAC,IAAD,CAAOR,MAAOH,EAAUY,SAAU,CAACC,UAAW,QAAQC,eAAe,gBAIjF,wBAAIzB,MAAM,gBACN,kBAAC,OAAD,CAAMgB,GAAE,IAAMN,EAAQY,SAAS,OAC3B,0BAAMA,SAAS,YAAYvB,MAIvC,wBAAIC,MAAM,4BACLe,W,GAhClBW,IAAMC,WA2CVzB,O,qFC/CT0B,E,kGACFzB,OAAA,WACI,IAAM0B,EAAQzB,KAAKC,MAAMwB,MACjBC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAKA,EAAc,GAAGK,WAC/DC,EAAW,KAAKN,EAAc,GAAGK,WAEvC,OAAQ,yBAAKnC,MAAM,sDACf,yBAAKA,MAAM,QAAQgC,GAAa,kBAAC,OAAD,CAAMhB,GAAIkB,GAAV,cAChC,yBAAKlC,MAAM,+CACVqC,MAAMC,KAAK,CAAEC,OAAQR,IAAY,SAACS,EAAGC,GAAJ,OAClC,kBAAC,OAAD,CAAMvB,IAAG,qBAAsBuB,EAAI,GAAKzB,GAAE,KAAY,IAANyB,EAAU,GAAKA,EAAI,IAAMA,EAAI,OAG7E,yBAAKzC,MAAM,QAAQiC,GAAY,kBAAC,OAAD,CAAMjB,GAAIoB,GAAV,gB,GAhBvBV,IAAMC,WAqBXC","file":"component---src-templates-works-tags-js-dda08d62f783eb82e5a1.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TAG from \"../components/works-tag\"\nimport WORKS from \"../components/work\"\nimport PAGER from \"../components/pager\"\n\nconst Tags = ({data, location, pageContext}) => {\n    const siteTitle = pageContext || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const tags = data.allMarkdownRemark\n\n    const {tag} = pageContext\n    const {edges, totalCount} = data.allMarkdownRemark\n    const tagHeader = `${tag}`\n\n    return (<Layout location={location} title={tagHeader}>\n        <div class=\"container\">\n            <SEO title={tag} />\n            <h1 class=\"heading-main\"><span>{tagHeader}</span></h1>\n            <TAG tag={tags} />\n            <WORKS posts={posts} />\n        </div>\n    </Layout>)\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({tag: PropTypes.string.isRequired}),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(PropTypes.shape({\n                node: PropTypes.shape({\n                    frontmatter: PropTypes.shape({title: PropTypes.string.isRequired}),\n                    fields: PropTypes.shape({slug: PropTypes.string.isRequired})\n                })\n            }).isRequired)\n        })\n    })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql `\n  query worksTagListQuery($tag: String) {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    allMarkdownRemark(sort: {\n        fields: [frontmatter___date], order: DESC }\n        filter: { frontmatter: { tags: { in: [$tag] }, category: { in: [\"works\"] } } }\n        limit: 2000\n    ) {\n      totalCount\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY年MM月DD日\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Image from \"gatsby-image\";\n\nimport kebabCase from \"lodash/kebabCase\"\n\nclass Post extends React.Component {\n    render() {\n        const posts = this.props.posts\n        return (<div>\n            <ol class=\"d-md-flex flex-wrap\">\n                {\n                    posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const slug = post.frontmatter.slug\n                        const date = post.frontmatter.date\n                        const thumnail = post.frontmatter.thumnail.childImageSharp.fluid\n                        const tags = post.frontmatter.tags\n                        const tagItems = tags.map((tag) => <li class=\"col\">\n                            <Link to={`/works-tags/${kebabCase(tag)}/`}>{tag}</Link>\n                        </li>)\n                        return (<li class=\"col-md-3\" key={post.fields.slug}>\n                            <article className=\"work-list-item p-md-10 pb-20\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n                                <header>\n                                    <figure>\n                                        <div className=\"posts__image\">\n                                            <Link to={`/${slug}`} itemProp=\"url\">\n                                                <Image fluid={thumnail} imgStyle={{objectFit: \"cover\",objectPosition:\"50% 50%\"}}/>\n                                            </Link>\n                                        </div>\n                                    </figure>\n                                    <h2 class=\"post-hedding\">\n                                        <Link to={`/${slug}`} itemProp=\"url\">\n                                            <span itemProp=\"headline\">{title}</span>\n                                        </Link>\n                                    </h2>\n                                </header>\n                                <ul class=\"tagname d-flex flex-wrap\">\n                                    {tagItems}\n                                </ul>\n                            </article>\n                        </li>)\n                    })\n                }\n            </ol>\n        </div>)\n    }\n}\n\nexport default Post\n\nexport const pageQuery = graphql `\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n          slug\n          tags\n          thumnail {\n            childImageSharp {\n              fluid(maxWidth: 338) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n          tag: fieldValue\n          totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nclass Pager extends React.Component {\n    render() {\n        const pages = this.props.pages\n        const { currentPage, numPages } = pages\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\"+(currentPage - 1).toString()\n        const nextPage = \"/\"+(currentPage + 1).toString()\n\n        return (<div class=\"pagenation d-flex flex-wrap justify-content-center\">\n            <div class=\"col\">{!isFirst && ( <Link to={prevPage}> ← 前のページ </Link> )}</div>\n            <div class=\"col d-flex flex-wrap justify-content-center\">\n            {Array.from({ length: numPages }, (_, i) => (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            ))}\n            </div>\n            <div class=\"col\">{!isLast && ( <Link to={nextPage}> 次のページ → </Link> )}</div>\n        </div>)\n    }\n}\n\nexport default Pager\n\nexport const pageQuery = graphql `\n  query pagerQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      ) {\n\n          group(field: frontmatter___tags) {\n              tag: fieldValue\n              totalCount\n          }\n    }\n  }\n`\n"],"sourceRoot":""}