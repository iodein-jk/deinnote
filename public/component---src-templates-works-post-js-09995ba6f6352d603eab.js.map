{"version":3,"sources":["webpack:///./src/templates/works-post.js"],"names":["WorksPostTemplate","data","location","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","tagItems","frontmatter","tags","map","tag","class","to","kebabCase","siteUrl","slug","fields","description","excerpt","className","itemScope","itemType","fluid","thumnail","childImageSharp","itemProp","date","url","dangerouslySetInnerHTML","__html","tableOfContents","html","rel","pageQuery"],"mappings":"8FAAA,oKAkEeA,UAxDW,SAAC,GAAmC,IAAD,EAAjCC,EAAiC,EAAjCA,KAAmBC,GAAc,EAA3BC,YAA2B,EAAdD,UACrCE,EAAOH,EAAKI,eACZC,GAAY,UAAAL,EAAKM,KAAKC,oBAAV,eACZC,QADY,QAEXC,EAAkBT,EAAlBS,SAAUC,EAAQV,EAARU,KAEXC,EADOR,EAAKS,YAAYC,KACRC,KAAI,SAACC,GAAD,OAAS,wBAAIC,MAAM,OACzC,kBAAC,OAAD,CAAMC,GAAE,eAAiBC,IAAUH,GAA3B,KAAqCA,OAE3CI,EAAUnB,EAAKM,KAAKC,aAAaY,QACjCC,EAAUjB,EAAKkB,OAAOD,KAE5B,OAAQ,kBAAC,IAAD,CAAQnB,SAAUA,EAAUO,MAAOH,GACvC,kBAAC,IAAD,CAAKG,MAAOL,EAAKS,YAAYJ,MAAOc,YAAanB,EAAKS,YAAYU,aAAenB,EAAKoB,UACtF,6BAASC,UAAU,wBAAwBC,UAAU,YAAYC,SAAS,6BACtE,4BAAQF,UAAU,eACd,gCACI,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAOA,UAAU,GAAGG,MAAOxB,EAAKS,YAAYgB,SAASC,gBAAgBF,UAG7E,wBAAIG,SAAS,YAAY3B,EAAKS,YAAYJ,OAC1C,uBAAGgB,UAAU,YAAYrB,EAAKS,YAAYmB,MAC1C,wBAAIf,MAAM,mDACLL,GAEL,kBAAC,IAAD,CAAOH,MAAOL,EAAKS,YAAYJ,MAAOwB,IAAG,GAAKb,EAAUC,EAAQE,YAAanB,EAAKoB,WAEtF,yBAAKC,UAAU,cAAcS,wBAAyB,CAACC,OAAQ/B,EAAKgC,mBACpE,6BAASX,UAAU,cAAcS,wBAAyB,CAClDC,OAAQ/B,EAAKiC,MACdN,SAAS,iBAEpB,yBAAKN,UAAU,mCACX,wBAAIA,UAAU,aACV,wBAAIA,UAAU,YAENf,GAAa,kBAAC,OAAD,CAAMQ,GAAE,GAAKR,EAASY,OAAOD,KAAQiB,IAAI,QAClD,kBAAC,IAAD,CAAOV,MAAOlB,EAASG,YAAYgB,SAASC,gBAAgBF,QAC5D,8BAAOlB,EAASG,YAAYJ,SAIxC,wBAAIgB,UAAU,YAENd,GAAS,kBAAC,OAAD,CAAMO,GAAE,GAAKP,EAAKW,OAAOD,KAAQiB,IAAI,QAC1C,kBAAC,IAAD,CAAOV,MAAOjB,EAAKE,YAAYgB,SAASC,gBAAgBF,QACxD,8BAAOjB,EAAKE,YAAYJ,aAW7C,IAAM8B,EAAS","file":"component---src-templates-works-post-js-09995ba6f6352d603eab.js","sourcesContent":["import React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Share from \"../components/share\";\n\nimport Image from \"gatsby-image\";\nimport kebabCase from \"lodash/kebabCase\"\n\nconst WorksPostTemplate = ({data, pageContext, location}) => {\n    const post = data.markdownRemark\n    const siteTitle = data.site.siteMetadata\n        ?.title || `Title`\n    const {previous, next} = data\n    const tags = post.frontmatter.tags\n    const tagItems = tags.map((tag) => <li class=\"col\">\n        <Link to={`/works-tags/${kebabCase(tag)}/`}>{tag}</Link>\n    </li>)\n    const siteUrl = data.site.siteMetadata.siteUrl;\n    const slug    = post.fields.slug;\n\n    return (<Layout location={location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt}/>\n        <article className=\"blog-post container-2\" itemScope=\"itemScope\" itemType=\"http://schema.org/Article\">\n            <header className=\"text-center\">\n                <figure>\n                    <div className=\"posts__image\">\n                        <Image className=\"\" fluid={post.frontmatter.thumnail.childImageSharp.fluid}/>\n                    </div>\n                </figure>\n                <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n                <p className=\"datetime\">{post.frontmatter.date}</p>\n                <ul class=\"tagname d-flex flex-wrap justify-content-center\">\n                    {tagItems}\n                </ul>\n                <Share title={post.frontmatter.title} url={`${siteUrl}${slug}`} description={post.excerpt} />\n            </header>\n            <div className=\"posts-index\" dangerouslySetInnerHTML={{__html: post.tableOfContents}}/>\n            <section className=\"articleBody\" dangerouslySetInnerHTML={{\n                    __html: post.html\n                }} itemProp=\"articleBody\"/>\n        </article>\n        <nav className=\"blog-post-nav container-2 mt-80\">\n            <ul className=\"d-md-flex\">\n                <li className=\"col-md-6\">\n                    {\n                        previous && (<Link to={`${previous.fields.slug}`} rel=\"prev\">\n                            <Image fluid={previous.frontmatter.thumnail.childImageSharp.fluid}/>\n                            <span>{previous.frontmatter.title}</span>\n                        </Link>)\n                    }\n                </li>\n                <li className=\"col-md-6\">\n                    {\n                        next && (<Link to={`${next.fields.slug}`} rel=\"next\">\n                            <Image fluid={next.frontmatter.thumnail.childImageSharp.fluid}/>\n                            <span>{next.frontmatter.title}</span>\n                        </Link>)\n                    }\n                </li>\n            </ul>\n        </nav>\n    </Layout>)\n}\n\nexport default WorksPostTemplate\n\nexport const pageQuery = graphql `\n  query WorksPostBySlug(\n    $id: String!\n    $previousWorksId: String\n    $nextWorksId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"YYYY年MM月DD日\")\n        description\n        tags\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 1280) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      tableOfContents\n    }\n    previous: markdownRemark(id: { eq: $previousWorksId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 320) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    next: markdownRemark(id: { eq: $nextWorksId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        thumnail {\n          childImageSharp {\n            fluid(maxWidth: 320) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}